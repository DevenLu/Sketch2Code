// (ctrl shift p)

if([selection count] == 0)
{
   log("No selection found")
   return
}

var target = selection[0]

if (![target isKindOfClass:[MSLayerGroup class]])
{
   log("Not a group")
   return
}

log("Target: " + target)

var baseDir = get_dir_from_prompt()

//Currently only that is supported
var viewMapping = loadObjectMap()
var viewDescriptors = loadSnippet("Common")
var targetTemplates = loadSnippet("UITableViewCell")

//parse target
var subviews = parseLayerInGroup(target)

var interfaceContent;
var implementationContent;

writeTextToFile(baseDir + "/" + [target name] + ".h", interfaceContent)
writeTextToFile(baseDir + "/" + [target name] + ".m", implementationContent)

///////////////FUNCTIONS///////////////

//Parses the layer of the selected group
//MSLayerGroup -> layer of view structs
//Where view structs contains init, addition and layout update template codes
function parseLayerInGroup(targetGroup)
{
   var layers = []

   var loop = [[targetGroup children] reverseObjectEnumerator];
   while(layer = [loop nextObject])
   {
      if (layer == target)
      {
         continue
      }

      var layerName = [layer name]
      var layerClass = NSStringFromClass([layer class]);
      var viewClass = viewMapping[layerClass]

      log("Layer:" + layerClass + " name:" + layerName)

      var currentViewDescriptor = viewDescriptors[viewClass];
   }

   return layers
}

//Replaces the bindings defined in dictionary in the tempate string
function templateCodeWithDictionary(template, dictionary)
{
   var loop = [[dictionary allKeys] objectEnumerator]

   var finalString = template

   while(binding = [loop nextObject])
   {
      var re = new RegExp(binding, 'g');
      finalString = finalString.replace(re, dictionary[binding]);
   }

   return finalString
}

////
//COMMON HELPERS
////
function rectToString(rect)
{
   return "CGRectMake(" + Math.ceil(rect.x()).toFixed(0) + "," + Math.ceil(rect.y()).toFixed(0) + "," + Math.ceil(rect.width()).toFixed(0) + ","+ Math.ceil(rect.height()).toFixed(0) +")"
}

////
//IO - Write/Read
////

// () -> {Sketch view : UIKit view} mapping
function loadObjectMap()
{
    var data = [[NSData alloc] initWithContentsOfFile:@"./view.map"];
    return [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:nil];
}

// name of the class -> struct that contains the header and implementation template
function loadSnippet(snippetName)
{
  var filePath = [@"./" stringByAppendingFormat:@"%@.snippet",snippetName]
  var snippet = [NSString stringWithContentsOfFile: encoding:NSUTF8StringEncoding error:nil];
}

function writeTextToFile(path, text)
{
     if (typeof path !== 'string')
         return false;

     // create a NSString object from the given text
     var nsstring = NSString.stringWithUTF8String(text);

     // use the writeToFile method of the NSString object to write the text to the given URL
     var result = [NSString writeToFile:path atomically:1 encoding:NSUTF8StringEncoding error:nil];

     return result;
}

function get_dir_from_prompt(){
    var panel = [NSOpenPanel openPanel];
    [panel setMessage:"Where do you want to place your assets?"];
    [panel setCanChooseDirectories: true];
    [panel setCanChooseFiles: false];
    [panel setCanCreateDirectories:true];
    var default_dir = [[doc fileURL] URLByDeletingLastPathComponent];
    [panel setDirectoryURL:default_dir];
    if ([panel runModal] == NSOKButton){
      var message = [panel filename];
      return message;
    }
}
